server
   1 创建grpc server 
      grpcServer := grpc.NewServer(opts...)
   2 注册方法到 server,将pb里的方法描述注册到grpcServer， myServer()实现RouteGuideServer,底层调用  pb.desc_handler --> myServer_handler
      pb.RegisterRouteGuideServer(grpcServer, myServer())
   3 启动监听
      grpcServer.Serve(lis)
 
client
  1 创建连接，阻塞调用，
     conn, err := grpc.Dial(*serverAddr, opts...)
  2 pb创建client,调用自动生成的方法
     client := pb.NewRouteGuideClient(conn) 
 

方法调用
   1 每个请求创建一个stream, 先发送SET帧，设置参数;再发送header,包括method:post;path:方法通过http2的path设置,最后发送调用方法的参数,通过DATA帧发送
         http2://127.0.0.0.1:1000/routeguide.RouteGuide/GetFeature
   2 服务起发送header帧，status头表名调用状态，200成功;接着发送data帧，返回结果，最后发送header帧，grpc-stats:0表名成功
   3 grpc-status  codes/codes.go里定义 0:成功


代码：
  interceptor 拦截器： 请求过来先调用该方法，然后调用desc_handler
  grpc.Invoke 普通方法调用封装
  grpc.NewClientStream 有stream的调用
  UnaryRPC: 一元(普通)rpc
  Streaming RPC: stream rpc
  ServerHttp --> serveStreams --> handleStream --> (processUnaryRPC / processStreamingRPC): server.go  处理请求入口


http_transport,创建stream,streamId所以steam(activeStreams map[uint32]*Stream)
    一个tcp连接启动三个G
        1：reader          读物包
        2: newLoopyWriter  发送包
        3: keepalive       保活

    reader 读物包，处理
      header : transport.statsHandler.HandleRPC
      data  :  stream.fc.onData

naming 地址解析，获取有用地址，
      ipwatch   ip知道直接返回
      dnswatch  查询dns,返回服务器名称，然后名称解析到地址。
      Next()接口

Balance 
    Up     grpc内部通知一个地址连接已建立
    down   grpc内部通知一个地址连接不可用
    Get    grpc获取一个已经建立链接的地址,可阻塞
    Notify 获取所有地址
