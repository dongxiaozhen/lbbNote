set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" custom plugins
"Plugin 'sheerun/vim-polyglot'
Plugin 'fatih/vim-go'
Plugin 'AndrewRadev/splitjoin.vim'
Plugin 'majutsushi/tagbar'
Plugin 'shougo/neocomplete.vim'
"Plugin 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
"Plugin 'roxma/nvim-yarp'
"Plugin 'roxma/vim-hug-neovim-rpc'
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'tpope/vim-fugitive'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'mbbill/undotree'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'scrooloose/nerdcommenter'
Plugin 'grep.vim'
Plugin 'sh.vim--Cla'
Plugin 'dyng/ctrlsf.vim'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'suan/vim-instant-markdown'
Plugin 'leshill/vim-json'
Plugin 'thinca/vim-quickrun'
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'terryma/vim-expand-region'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'chrisbra/csv.vim.git'
Plugin 'johngrib/vim-game-code-break'
Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plugin 'fatih/gomodifytags'
Plugin 'lervag/vimtex'
Plugin 'iamcco/mathjax-support-for-mkdp'
Plugin 'iamcco/markdown-preview.vim'
Plugin 'flazz/vim-colorschemes'
"Plugin 'Yggdroot/indentLine'

" 需要安装go get -u github.com/cweill/gotests/...
Plugin 'buoto/gotests-vim'
"Plugin 'aperezdc/vim-template'

"Plugin 'powerline/powerline', {'rtp': 'powerline/bindings/vim/'}

Plugin 'sirver/ultisnips'
Plugin 'honza/vim-snippets'

" rust
" Vim racer
Plugin 'racer-rust/vim-racer'
" Rust.vim
Plugin 'rust-lang/rust.vim'

" all of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" general customizations
syntax on
set ts=4
set sw=4
set expandtab
set number
"设置光标移动后是否移动窗口
"set scrolloff=999
set encoding=utf-8
au WinLeave * set nocursorline nocursorcolumn
au WinEnter * set cursorline cursorcolumn
set cursorline cursorcolumn
set fileencodings=ucs-bom,utf-8,cp936,gb18030,gbk,gb2312,big5
"set fileencodings=utf-8,gbk

let &termencoding=&encoding

" 高亮显示搜索结果
set hlsearch

"代码折叠
set fdm=indent
"启动vim时关闭折叠代码
set nofoldenable

let g:vim_markdown_folding_disabled = 1
syntax enable
"set background=dark
let g:solarized_termcolors=256
"colorscheme solarized
colorscheme molokai
"colorscheme cherryblossom 

"将原来的\ leader 修改为逗号
let mapleader=","

" 插入模式的ESC修改为jj
inoremap jj <ESC>

" ctrlsf 使用 需要安装ag  sudo apt-get install silversearcher-ag
"let g:ctrlsf_ackprg='ack'
" CtrlSF locates project root by searching VCS root (.git, .hg, .svn, etc.)
"let g:ctrlsf_default_root = 'project'
"nmap     <C-F>f <Plug>CtrlSFPrompt
"vmap     <C-F>F <Plug>CtrlSFVwordExec
"nnoremap <C-F>o :CtrlSFOpen<CR>
nmap <leader>f <Plug>CtrlSFPrompt
nmap <leader>F :CtrlSFOpen

" plugin customizations
" neocomplete
let g:neocomplete#enable_at_startup = 1

" vim go
" disable open browser after posting snippet
let g:go_play_open_browser = 0
" enable goimports
let g:go_fmt_command = "goimports"
" enable additional highlighting
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1

" ctrlp.vim
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }
let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux


" vim-airline
set laststatus=2
let g:bufferline_echo = 0
let g:airline#extensions#tabline#enabled = 1
"let g:airline_theme = 'dark'
"let g:airline_theme = 'powerlineish'
let g:airline_theme = 'molokai'
if !exists('g:airline_symbols')
let g:airline_symbols = {}
endif
let g:airline_left_sep = '▶'
let g:airline_left_alt_sep = '❯'
let g:airline_right_sep = '◀'
let g:airline_right_alt_sep = '❮'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'

" vim_expand-region
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)

" rainbow_parentheses
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

" 不加入这行, 防止黑色括号出现, 很难识别
" \ ['black',       'SeaGreen3'],

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" tagbar
" sudo apt-get install ctags，然后 go get -u github.com/jstemmer/gotags 安装 Go 语言的相关解析器。
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds' : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

set tags+=./tags
"set tags+=/mnt/hgfs/paipai/cplus/udbcs_logs_game_br_20150919/tags


" shortcuts remap
nmap <F2> :tabnew<CR>
nmap <F3> :tabclose<CR>
map  <F4> :%!jq "."<CR>
"nmap <F5> :UndotreeToggle<CR>
"map <F5> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
"imap <F5> <ESC>:!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
""函数引用的地方
nmap <F5> :GoReferrers<CR>
nmap <F6> :nohl<CR>
nmap <F7> :NERDTreeTabsToggle<CR>
nmap <F8> :TagbarToggle<CR>
nmap <F10> :QuickRun<CR>
nmap <C-Left> :tabprevious<CR>
nmap <C-Right> :tabnext<CR>
"nnoremap <Tab> <Esc>
"vnoremap <Tab> <Esc>gV
"onoremap <Tab> <Esc>
"inoremap <Tab> <Esc>`^
map <C-a> :vertical resize +20<CR>
map <C-l> :vertical resize -20<CR>

" show a list of interfaces which is implemented by the type under your cursor
au FileType go nmap <Leader>s <Plug>(go-implements)
" show type info for the word under your cursor
au FileType go nmap <Leader>gi <Plug>(go-info)
" open the relevant Godoc for the word under the cursor
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
" run Go commands
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <leader>i <Plug>(go-install)
" open the definition/declaration in a new vertical, horizontal or tab for the
" word under your cursor
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
" rename the identifier under the cursor to a new name
au FileType go nmap <Leader>e <Plug>(go-rename)
let g:go_bin_path = "/Users/libinbin/.mypath" 
let g:NERDSpaceDelims=1
let g:csv_delim=','

set rtp+=/Users/libinbin/.local/lib/python2.7/site-packages/powerline/bindings/vim/
set rtp+=$GOPATH/src/golang.org/x/lint/misc/vim
autocmd BufWritePost,FileWritePost *.go execute 'Lint' | cwindow
set laststatus=2
set t_Co=256
" set ignorecase smartcase
set modeline
set mouse=a
"vmap <c-c> "+y
vmap <F6> "+y 
"在visual模式下,复制到系统剪贴板上.
vmap <leader>c "+y

"片段管理工具
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
let g:snips_author = 'libinbin'

"latex排版工具
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:tex_conceal='abdmg'

"let g:NERDTreeIndicatorMapCustom = {
let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

"add file header
map <F10> :call TitleDet()<cr>'s
function AddTitle()
    call append(00,"/*")
    call append(01," * Created: ".strftime("%Y-%m-%d %H:%M %z"))
    call append(02," *")
    call append(03," * Modified: ".strftime("%Y-%m-%d %H:%M %z"))
    call append(04," *")
    call append(05," * Description: ")
    call append(06," *")
    call append(07," * Author: libinbin")
    call append(08," */")
    echohl WarningMsg | echo "Successful in adding the copyright." | echohl None
endfunction

"update file header
function UpdateTitle()
    normal m'
    execute '/\s\*\sModified:/s@:.*$@\=strftime(": %Y-%m-%d %H:%M %z")@'
    normal ''
    echohl WarningMsg | echo "Successful in updating the copy right." | echohl None
endfunction

"add or update fileheader
function TitleDet()
    let n=1
    while n < 8
        let line = getline(n)
        if line =~ '^\s\*\sModified:'
            call UpdateTitle()
            return
        endif
        let n = n + 1
    endwhile
    call AddTitle()
endfunction


"deoplete
"let g:deoplete#enable_at_startup = 1
"set pyxversion=3


"let g:indentLine_setColors = 0
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
let g:indentLine_bgcolor_term = 202
let g:indentLine_bgcolor_gui = '#FF5F00'
set list lcs=tab:\|.


augroup go

  au!
  au Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
  au Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
  au Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
  au Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')

  au FileType go nmap <Leader>dd <Plug>(go-def-vertical)
  au FileType go nmap <Leader>dv <Plug>(go-doc-vertical)
  au FileType go nmap <Leader>db <Plug>(go-doc-browser)

  au FileType go nmap <leader>r  <Plug>(go-run)
  au FileType go nmap <leader>t  <Plug>(go-test)
  au FileType go nmap <Leader>gt <Plug>(go-coverage-toggle)
  au FileType go nmap <Leader>i <Plug>(go-info)
  au FileType go nmap <silent> <Leader>l <Plug>(go-metalinter)
  au FileType go nmap <C-g> :GoDecls<cr>
  au FileType go nmap <leader>dr :GoDeclsDir<cr>
  au FileType go imap <C-g> <esc>:<C-u>GoDecls<cr>
  au FileType go imap <leader>dr <esc>:<C-u>GoDeclsDir<cr>
  au FileType go nmap <leader>rb :<C-u>call <SID>build_go_files()<CR>

augroup END


"" Buffer nav
noremap <leader>z :bp<CR>
noremap <leader>q :bp<CR>
noremap <leader>x :bn<CR>
noremap <leader>w :bn<CR>
