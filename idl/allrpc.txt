
thift 处理连接，在common.RpcHandler 中注册函数就行,每个client一个Goroute
rpc  func(rq *protoservice.ProtoRequest) *protoservice.ProtoReply

	type ProtoRequest struct {                                                                                                                                                                                                                                            
		Type       int32  `thrift:"type,1" json:"type"`
		Content    []byte `thrift:"content,2" json:"content"`
		ShardingID int64  `thrift:"sharding_id,3" json:"sharding_id"`
	}
	
	type ProtoReply struct {                                                                                                                                                                                                                                              
		Result_ int64  `thrift:"result,1" json:"result"`                                                                                                                                                                                 
		Type    int32  `thrift:"type,2" json:"type"`                                                                                                                                                                                     
		Content []byte `thrift:"content,3" json:"content"`                                                                                                                                                                               
	}
	
	
开启1024个goroutine处理handle，每个client开启一个read goroutine, 解包后分发到1024个G中的一个goroutine 的chan中，goroutine从特定的chan中读出数据然后处理，处理的结果会放到client的send chan中，监听send chan的goroutine处理发送(route中传递了conn)
ChannelPacketProcessor   func(packet *NetPacket)  使用了FkServer
	type NetPacket struct {                                                                                                                                                                                                                                          
		Nc   *FkConn
		Data []byte
		*ESPacket
	}                                                                                                                                                                                                        
	
	type ESPacket struct {                                                                                                                                                                                                                                      
		Pack_len  uint16
		Pack_type uint16
		User_id   uint64
		Token     uint32
		Es_id     uint32
		Session   uint64
	}

	
NewFkServer
	listen 端口，开启read,send 连个Goroutine
	
	
	
TypeRouteProcessor   封装了ChannelPacketProcessor ,使用了FkServer
	defaultRoute 找到route,发送出去，route接收到结果后找到client,然后发给client
					   ___________
	------------------|        r1| ---------->server1
					  | -----    |
	------------------| l024G|   |
					  | -----    |  
	------------------|        r2|------------->server2
					  |__________|
					  
					  
rpcProxy
	RpcProxyHander 实现了RpcHandler，找到route转发出去，收到结果return
	代理一个客户端创建一个G，创建count个AsyncRpc，每个AsyncRpc又会创建size个链接，代理处理请求时，随机选用可用的AsyncRpc,Async再随机选用一条可用链接发送请求，阻塞等待，然后返回，

监听端口代理
	cluster_server_proxy (不带conn分派)
		client_handle  等待服务的连接,服务的注册(clusterID,typeId)，将服务发来的数据根据数据自带的ESID找到一个conn,然后发送出去
		server_handle  等待ES的连接,注册ES，将ES发来的数据根据ClusterID,typeId找到conn,发送出去
	
								-->1	
																					--->2
	(连接方向)		es----------------------------> cluset_server_proxy <-----------------------server
																			<---3
						<---4(根据ESID找到)
	
	cluster_rpc_proxy
	
								--->1	
																				---->2
	(连接方向)		server -----------------------------> cluster_rpc_proxy <--------------------------- cluster_old_rpc
																						<---3
										<---4 (更具IndentifyID找到)
	
不监听端口代理
	cluster_old_rpc (带conn分派)
	
												 <--1 注册rpcId	
	 (连接方向)   cluster_rpc_server  <-------------------------------------- cluster_old_rpc -------------------------> rpc
												---->2   发送自定义rpc序列化数据
											            <--- 4                                       ---->3 发送到rpc
