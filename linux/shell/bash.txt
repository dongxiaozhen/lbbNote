lsb_release：Linux 发行版信息

https://github.com/onceupon/Bash-Oneliner  bash 在线文档

ctrl-r command to search the history

type cmd 查看命令到底是由shell自带的，还是由shell外部的独立二进制文件提供的
"info $name" 	双引号 里面的$name输出变量的结果
'info $name'	单引号 里面的$name原样输出
a=`cmd`		反斜扛 运行结果赋值给一个变量, == $(cmd)
(cmd)
exec cmd 将并不启动新的shell，而是用要被执行命令替换当前的shell进程，并且将老进程的环境清理掉，而且exec命令后的其它命令将不再执行
source命令或者"."，不会为脚本新建shell，而只是将脚本包含的命令在当前shell执行

#注释
cmd1 && cmd2 || cmd3 cmd1运行成功就运行cmd2，否则运行 cmd3

shell 数组 
	声明 declare -a name
	追加 for i in {1..3};do
		name+=($i)  //加()
	     done 	


date
	 --date="@12345678" 显示字符窜所指的日期和时间。@时间格式转换
     mac -r12345678  
	-s 设置时间
	+%xxxx 显示格式

find xxx|xargs grep xxxx 查找文件中有字符串
 find ./ -mtime -50 -mtime +20 -a  -type f
    -mtime +n n天前修改的
    -mtime -n n天内修改的
               ->      <-
     ---------|----------|------------｜--
             -50        +20           now

grep -l 列出匹配的文件名
     -r 递归遍历文件夹
    -F 固定字符串的查找，
	-E 正则
	-A 3 输出匹配行后的3行内容
	-n 显示行号
	-i 忽略大小写
	-v 反向搜索
	
ag --go PATTERN PATH      // 文件类型 ag --list-file-types
	在PATH下文件类型是go的文件里搜索PATTERN
	-n: 不进行文件夹的递归搜索
	-l: 只输出有匹配的文件 
	-L: 只输出没有匹配的文
	-A 打印匹配文本后面的N行
	-B 打印匹配文本前面的N行
	-c 打印每个文件匹配文本的次数


ack --type go pattern path  // ack --help=types


sed -i 's/Event\.UseCoin/Event\.UseCoina/g' filename 查找并替换文件中的字符串   以行为单位的文本编辑工具
	-i edit file in place 在文件中替换，sed默认是有缓存的
	-n 只显示匹配处理的行，经常和'p' 组合，只答应命令输出行
	-e 多重编辑：可以输入多个命令
	h,H 相当于复制到一个地方(缓存),H是追加，h是覆盖
	g,G 都是从(缓存)中取出一块数据，g替代当前模板块中的文本,G追加到当前模板块文本的后面
	a/i/c/d/D/s 命令

awk  以行为单位的文本编辑工具,一行又有多个分段

curl 参数需要通过 -d "xx=xx&kk=kk"
	curl -o [文件名] www.sina.com    默认输出到stdout
	curl -L www.sina.com #有的网址是自动跳转的
	curl -i www.sina.com #`-i`参数可以显示http response的头信息  `-I`参数则是只显示http response的头信息。
	curl -v www.sina.com #`-v`参数可以显示一次http通信的整个过程，包括端口连接和http request头信息。
	curl --trace output.txt www.sina.com #更详细的通信过程
	curl --trace-ascii output.txt www.sina.com
	curl -X POST --data "data=xxx" example.com/form.cgi #Post
	curl -X POST--data-urlencode "date=April 1" example.com/form.cgi #如果你的数据没有经过表单编码，还可以让curl为你编码
	curl --cookie "name=xxx" www.example.com #使用`--cookie`参数，可以让curl发送cookie
	curl -c cookies http://example.com #`-c cookie-file`可以保存服务器返回的cookie到文件
	curl -b cookies http://example.com #`-b cookie-file`可以使用这个文件作为cookie信息，进行后续的请求
	curl --header "Content-Type:application/json" http://example.com
	curl URL --limit-rate 50k #--limit-rate限制curl的下载速度 k（千字节）和m（兆字节）指定下载速度限制。

wget
	-O 输出文件名
	-c 需要继续中断下载的
	-b 都台下载 （tail -f wget-log查看后台进度）
	--limit-rate=50k 限速

ab apache 性能测试工具
	-n 4000 //request num
    -c 3    //request concurrency

wrk 
	-c 400同时最大连接数
	-t 12 线程数量
	-d 20 测试时间，单位是秒

du -s 当前目录的总大小

watch
	-n 3 间隔时间
	-d 高亮变化的信息

seq -f"str%g" -s"`echo -e "\t"`" 1 5 100

column -s "分隔符" -t filename 格式化对其列 输出
cut -d"分隔符" -[b|c|f}[1-2|1-|2-]  [--complement除此之外的意思]filename
sort -f 大小写忽略
	-r 反转
	-n 数字比较，默认是字母
	-t 列分割符
	-k 排序的列号

uniq -u 只显示没有重复的行
	-c 重复次数
				 
tr -d -c -s [seq1] [seq2] <input file 
	-d 删除input中的seq1
	-c 取代所有不属于seq1的字符(seq1的补集)
	-s 把连续重复出现的字符以一个字符代替
	eg: tr -d -c "xx" <input 删除input中的"xx"

xargs 将前面的标准输出作为后面的命令参数，管道只能将前面的标准输出作为后面的标准输入 
	将输入中的“换行符 空格 制表符”都被空格取代，然后转为一行，然后通过 -n 将一行以空格，回车分成多行
	将单行输入转换为多行输入，将多行输入转化为单行输入(-n3 3个为一行，-dx 以x为頂界符)
	ls *.jpg | xargs -n1 -I cp {} /data/images  {}替换字符串
diff
	-y 以并列的方式显示对比文件

运算  bc  
	  expr
      echo $[1154537767123017896>>20] 

dos2unix  格式转换
iconv 编码转换

fdisk -l 查看挂载
lsblk    查看挂载
mount -t type dev dir
umount -t type dev


popd pushd 目录操作   最新目录  前一次    前两次  ... 最早一个目录
								pushd +1 (循环成为最新目录）
								popd +1 （删除这个目录)

top 
	top -p pid 
	按”c”快捷键，将显示命令的全路径以及命令参数
	按”d”可以更新top更新频率
	按”u”快捷键，可以过滤出特定用户拉起的进程
	按”f”快捷键，列显示，排序规则

JSON  
	jq .key file
	jq .[1].key 数组

ls -lR 递归显示目录
ls -t 时间排序 
   -S 文件大小
   -r 反序排列

stat filename  查看文件详细信息，inode,time,size,,


realpath 获取文件相对路径和绝对路径
