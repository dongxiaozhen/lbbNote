case1：D是红色，DR肯定为黑色，且为NIL（别问为什么了。。。。）

case2：D是黑色：
- case2-1：D是黑色，DR不为NIL，必为红色
- case2-2：D是黑色，DR为NIL，必为黑色

    case2-2-1： case2-2条件+S节点为红色    
    case2-2-2：case2-2条件+S节点为黑色
        case2-2-2-1：case2-2-2+P不能确定，SL为红色，SR任意
        case2-2-2-2：case2-2-2+P不能确定，SL为任意，SR红色
        case2-2-2-3：case2-2-2+P为红色，SL为黑色，SR黑色
        case2-2-2-4：case2-2-2+P为黑色，SL为黑色，SR黑色
----------------------------------------------------------------------------------------- 
原文：https://blog.csdn.net/qq_37169817/article/details/78880110 




llrb (Left-Leaning Red Black Tree) 左斜红黑树中，所有的3-node其内部的红边都是向左倾斜的，
    可导出：
        1:红点都在左分支
        2:左分支可能比右分支多一个红色节点，但是右分支不能比左分支多节点   

    加入操作，需要注意的是节点的拆分(3节点变成两个2节点1)
        旋转操作：
            1: 插入的节点在右分支，就需要旋转
            2: 插入的节点在左分支，需要判断两个红边项链的情况
            3: 左右节点都是红色，需要变色

    删除操作，需要注意的是节点的合并
        删除最大值(从左分支借红色节点)
            旋转：
                1: 左分支是红色，向右旋转
                2: 左右分支是黑色，右分支的左分支也是黑色，需要变色
                    2.1 如果左分支的左分支是红色，向右旋转
        删除最小值
            旋转：
                1: 左分支的左分支是黑色，需要变色
                    1.1 如果右分支的左分支是红色，向左旋转，然后向左再旋转(目的是往左移动红边)

        删除任意值
            左分支：和删除最小值逻辑一样,
            右分支：和删除最大值一样。因为大于等于在右分支，所以删除操作一定是在此分支终进行的。
                如果找到的节点是中间节点，则删除此节点的右分支的最小值，然后用最小值覆盖要产出的点。
                如果是叶子节点(右分支是空，说明此节点是叶子结点)
                    1:如果左分支是红色的，会先旋转，所以右分支不可能为空
                    2:左分支是黑色的，右分支不可能为空
https://www.jianshu.com/p/0319d7781814
