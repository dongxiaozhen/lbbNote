socks是核心，所有要发送、接受的数据都要socks层中转。socks有两个队列，uwq(upper write queue)、urq(upper read queue),uwq存放要发送的数据，
pipe包装了con，读取，发送格式化数据

发送数据
server---> socks---> bus--> conpipe --> Pipe --> con

接受数据
server <---socks <---bus <--conpipe <-- Pipe <--con

处理数据 SendHook(发送到网络之前，给数据加工数据(添加消息头部)) RecvHook

一个连接要启动两个goroutine,一个读取底层数据，一个发送底层数据，两个goroutine的退出方式都是监听socks的closeChan(被动退出),并且数据发送或者接受错误就直接关闭链接并退出(主动退出)
一个proto启动启动多个goroutine,处理协议内容
*读写goroutine中有个一错误就关闭这个链接
关闭socks的时候要尝试发送完所有的数据。

bus (1.将消息发送给所有链接的客户端;2:读取客户端的请求)      
bus       
		|<------>per1 
		|            
		|            
recv	|            
 <----->|<------>per2 
	    |              
		|            
		|            
		|            
		|<------>per3		
		
pub/sub(单方向,pub发送数据到所有sub,sub收到数据后过滤)
				|----------->sub1
				|
				|
				|
				|----------->sub2
-------->pub--> |
				|
				|
				|
				|----------->sub3

pair
	pair1<------------------->pair2

	
pull/push
             |<-----------push1
			 |
			 |
pull<------- |<-----------push2
			 |
			 |
			 |<-----------push3
			 
			 
rep/req  (统一处理请求，然后将回复发给请求者,head(pipeid,seqid))
		|<------ >req1 
		|            
		|            
rep	    |            
  <---->|<-------req2 
	    |              
		|            
		|            
		|            
		|<-------req3


con(PipeInterface)
	Recv() : *Message, error    sz:body
	Send(msg *Message) : error
	
	
socket
	Send([]byte)error   sock.uwq <- msg
