 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | R |     Length (14)           |   Type (8)    |   Flags (8)   |
 +-+-+-----------+---------------+-------------------------------+
 |R|                 Stream Identifier (31)                      |
 +=+=============================================================+
 |                   Frame Payload (0...)                      ...
 +---------------------------------------------------------------+

type
  0 DATA 数据帧 
      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      | [Pad High(8)] | [Pad Low (8)] |          Data (*)             .
      +---------------+---------------+-------------------------------+
      .                            Data (*)                         ...
      +---------------------------------------------------------------+
      |                           Padding (*)                       ...
      +---------------------------------------------------------------+
	flag:
		0x1 流发送的最后一帧
		0x2 段的最后一帧

  1 HEADERS 报头
       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |Pad Length? (8)|
       +-+-------------+-----------------------------------------------+
       |E|                 Stream Dependency? (31)                     |
       +-+-------------+-----------------------------------------------+
       |  Weight? (8)  |
       +-+-------------+-----------------------------------------------+
       |                   Header Block Fragment (*)                 ...
       +---------------------------------------------------------------+
       |                           Padding (*)                       ...
       +---------------------------------------------------------------+
	flag:
		0x1 流发送的最后一帧
		0x2 段的最后一帧
		0x4 位3表示帧包含了整个的报头块(章节4.3),且后面没有延续帧。 不带有END_HEADERS标记的报头帧 在同个流上后面必须跟着延续帧。接收端接            收到任何其他类型的帧或者在其他流上的帧必须作为类型为协议错误的连接错误处理。
 
  2 PRIORITY 优先级帧
  3 RST_STREAM帧
       0                   1                   2                   3 
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+ 
       |                        Error Code (32)                        |
       +‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐+ 
    RST_STREAM 帧完全终止相关的流并使其转入关闭状态。在接收到流的RST_STREAM帧后,接收端绝对不能在流上发送额外的 帧。然而,在发送RST_STRE      AM帧后,发送端必须要准备接收并处理流上的其他帧,因为对等端有可能在收到RST_STREAM帧前就已经发送这些帧

  4 SETTINGS 设置帧
       0                   1                   2                   3 
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
       +‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+ 
       |Identifier (8) |                 Value (32)                  ... 
       +‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐+‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐+ 
       ...Value        | 
       +‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐+ 
      设置帧必须由两个终端在连接开始的时候发送，并且可以由各个终端在连接生存期的任意时间发送
      Flags 
		位1表示设置帧已被接收端接收并应用,如果这个位设置了，设置帧的载体必须为空。

	  identifier
         SETTINGS_HEADER_TABLE_SIZE (1) : 允许发送端通知远端终端解码报头区块的报头压缩表的最大承载量。这个编码器可以选
      择在报头区块中使用特定信号来减少报头压缩的大小(???)。初始值是4,096个字节。
         SETTINGS_ENABLE_PUSH (2) : 这个参数可以用来关闭服务器推送。终端在接收到此参数为0的情况下绝对不能发送服务器推
      送承诺帧。终端在已经设置此参数为0并且承认的情况下必须对接收到的服务器推送作为类型为协议错误的连接错误处理。 初始
      值是1,表示推送是许可的。任何不是0或1的值必须作为类型为协议错误的连接错误处理。
         SETTINGS_MAX_CONCURRENT_STREAMS (3) : 标明发送者允许的最大并发流。此限制是定向的:它适用于发送端允许接收
      端创建的最大并发流的数量。初始化时这个值没有限制。建议值不要大于100,以免不必要的限制并行。 此设置为0的值不应该被终
      端认为是特殊的。0的值阻止了新的流的创建,另外它也适用于被激活的流用尽的任何限制。对于短连接不应该设置此参数为0;
      如果服务端不希望接收任何请求,最佳的做法是关闭连接。
         SETTINGS_INITIAL_WINDOW_SIZE (4) : 表示发送端对流层流量控制的初始窗口大小(字节单位)。初始值是65,535。 这个参数
      影响了所有流的窗口大小,包括现有的流。见章节6.9.2. 流量控制窗口大小值大于2的31次方­1的必须被作为流量控制错误的连接
      错误处理。

  5 push 推送承诺帧
   用来在流发送者准备发送流之前告知对等端。推送承诺帧包含了终端准备创建的长流的31位无符号标记以及提供附加上下文的报头的集合。
	 0                   1                   2                   3 
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+ 
     | [Pad High(8)] | [Pad Low (8)] |X|  Promised Stream ID (31)  ... 
     +‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐+‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐+‐+‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐+ 
     ...    Promised Stream ID       | Header Block Fragment (*)   ... 
     +‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐+‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐+ 
     |                   Header Block Fragment (*)                 ... 
     +‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐+ 
     |                           Padding (*)                       ... 
     +‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐+ 
   flags:
	  ND_HEADERS (0x4) : 位3 表明帧包含了整个报头区块(章节4.3)并且不跟着延续帧。 不带有END_HEADERS标记的推送承诺 帧在同个流上面后面必须     跟着延续帧。接收端接收到任何其他类型或者其他流觞的帧必须作为类型为协议错误的连接错误处理。
     
  6 PING
      是一种从发送端测量最小的RTT时间的机制，同样也是一种检测连接是否可用的方法。
     flags:
		ACK (0x1) : 位1表示PING帧是一个PING响应。终端必须在PING响应中设置此标记。

  7 GOAWAY 超时帧
	超时帧(type=0x7)通知远端对等端不要在这个连接上建立新流。超时帧可以由客户端或者服务端发送。一旦发送,发动端将忽略当前连接上新的和标示   符大于上一个流的帧的发送。接收端接收到超时帧后绝对不能在这个连接上打开新的流,但是可以针对新的流创建一个新的连接.

  8 WINDOW_UPDATE 窗口更新帧
    0                   1                   2                   3 
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+ 
    |X|              Window Size Increment (31)                     | 
    +‐+‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐+ 
  无符号31为整数表明发送端除了现有的流量控制窗口可以发送的字节数

  9 CONTINUATION 延续帧
	用来延续一个报头区块(章节4.3)碎片序列。在现有流上可以发送到一个已存在延续帧,只要相同流上的前一阵是 报头帧、推送承诺帧或者不带有
  END_HEADERS标记的延续帧。
   0                   1                   2                   3 
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
   +‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+‐+ 
   |                   Header Block Fragment (*)                 ... 
   +‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐+ 
   flags
     END_HEADERS (0x4) : 位3设置指示这个帧的报头区块的终止.如果END_HEADERS位没有被设置,这个帧必须跟着另一个延续帧。



length: 后面FramePayLoad的长度

Identifier 客户端发起的流必须以奇数标示；服务器发起的流必须使用偶数来标示。0(0x0)用来标识连接控制信息流，且绝对不能用来建立一个新流。




wireshark 读取tcpdump抓取到的包，右击-->解码为-->当前-->http2


HTTP/2定义了一个以字符“:”开头的报头域
	:method get,post,put
    :scheme http,https,,
	:path /xx?yyy
响应报头字段
	:status 报头字段携带了HTTP状态码信息

