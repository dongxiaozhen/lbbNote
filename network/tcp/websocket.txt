
以帧的格式发送数据，字段有类型：文本，二进制；payloadlen,payloaddata,
readNext 读取下一帧的内容，忽略前一帧未读取的内容。返回一个reader,可以一段一段的读取payloaddata
readMessage 读取全部payloaddata数据

握手

请求
	WebSocket 首先发起一个 HTTP 请求，在请求头加上 Upgrade 字段，该字段用于改变 HTTP 协议版本或者是换用其他协议，这里我们把 Upgrade 的值设为 websocket ，将它升级为 WebSocket 协议。
	同时要注意 Sec-WebSocket-Key 字段，它由客户端生成并发给服务端，用于证明服务端接收到的是一个可受信的连接握手，可以帮助服务端排除自身接收到的由非 WebSocket 客户端发起的连接，该值是一串随机经过 base64 编码的字符串。
	
		GET /chat HTTP/1.1
		Host: server.example.com
		Upgrade: websocket
		Connection: Upgrade
		Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==
		Origin: http://example.com
		Sec-WebSocket-Protocol: chat, superchat
		Sec-WebSocket-Version: 13

响应：

		HTTP/1.1 101 Switching Protocols
		Upgrade: websocket
		Connection: Upgrade
		Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=
	里面重要的是 Sec-WebSocket-Accept ，服务端通过从客户端请求头中读取 Sec-WebSocket-Key 与一串全局唯一的标识字符串（俗称魔串）“258EAFA5-E914-47DA- 95CA-C5AB0DC85B11”做拼接，生成长度为160字节的 SHA-1 字符串，然后进行 base64 编码，作为 Sec-WebSocket-Accept 的值回传给	  客户端。


数据发送/读取

0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-------+-+-------------+-------------------------------+
|F|R|R|R| opcode|M| Payload len |    Extended payload length    |
|I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |
|N|V|V|V|       |S|             |   (if payload len==126/127)   |
| |1|2|3|       |K|             |                               |
+-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +
|     Extended payload length continued, if payload len == 127  |
+ - - - - - - - - - - - - - - - +-------------------------------+
|                               |Masking-key, if MASK set to 1  |
+-------------------------------+-------------------------------+
| Masking-key (continued)       |          Payload Data         |
+-------------------------------- - - - - - - - - - - - - - - - +
:                     Payload Data continued ...                :
+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
|                     Payload Data continued ...                |
+---------------------------------------------------------------+

	FIN 表示该帧是不是消息的最后一帧，1表示结束，0表示还有下一帧。
	RSV1, RSV2, RSV3 必须为0，除非扩展协商定义了一个非0的值，如果没有定义非0值，且收到了非0的 RSV ，那么 WebSocket 的连接会失效。
	opcode 用来描述 Payload data 的定义，如果收到了一个未知的 opcode ，同样会使 WebSocket 连接失效，协议定义了以下值：
		%x0 表示连续的帧
		%x1 表示 text 帧
		%x2 表示二进制帧
		%x3-7 预留给非控制帧
		%x8 表示关闭连接帧
		%x9 表示 ping
		%xA 表示 pong
		%xB-F 预留给控制帧
	
	MASK 表示Playload data 是否要加掩码，如果设成1，则需要赋值 Masking-key 。所有从客户端发到服务端的帧都要加掩码
	Playload len 表示 Payload 的长度，这里分为三种情况
		长度小于126，则只需要7位
		长度是126，则需要额外2个字节的大小，也就是 Extended payload length
		长度是127，则需要额外8个字节的大小，也就是 Extended payload length + Extended payload length continued ，Extended payload length 是2个字节，Extended payload length continued 是6个字节
		Playload len 则表示 Extension data 与 Application data 的和
