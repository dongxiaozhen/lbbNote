gdb 调试golang   
	gdb xxxx 然后source /usr/local/go/src/runtime/runtime-gdb.py  就可以使用 info goroutine 
	dlv 调试

time
	Timer定时完需要重置
	ticker 就是一直循环定时
	time有个goroutine，采用堆结构处理时间，当时间到期后会调用sendTime()无阻塞(select)的填充Timer里的chan。

select 里面定时不要在里边写time.After(d)，原因就是select每次执行都会重新执行case语句,并重新注册到select中。
switch不会自动从一个case子句跌落到下一个case子句。但是case可以使用逗号分隔的列表。

变量shadow问题  外部定义的变量，在其他范围{}内使用:=来赋值(情况多出现在和err同时赋值时),回出现变量隐藏的问题  go tool vet -shadow xx.go 可以发现这个问题

channel
	向关闭的channel 中发送数据会引发panic,在一个nil的channel上发送，接受数据会被永远阻塞,一个channel关闭多次会panic,
	监听关闭的channel，依然可以接受到之前成功发送的数据，如果已经没有数据会产生一个零值的数据。
	v,ok:=<-ch ok==true:v数据有效，ok==false:chan关闭，可以直接使用range遍历数据

range语句中的生成的数据是真实数据的拷贝，[],map,channel
被defer的调用(函数)会在包含的函数的结尾执行，而不是代码块哦末尾(if,for)
map 取不存在的key的value,返回零直
switch rr:=a.(type)   (type)只能在switch中出现，rr是变量，可以操作

context 包实现了对多个派生go的管理，每个需要监听ctx.Done()退出，正常完成后调用CancelFunc


go net/http  
	客户端 tcp请求完成后 response body指向con(需要自己调用read,close方法)
		每个客户端里缓存之前的所有远程连接，每个con有两个goroutine:readloop,writeloop
	服务器 tcp连接上后 response body指向con(需要自己调用write方法)
	

break
	break只能中断当前最近的一个for,swtich,select;如果要跳出外面的for,switch,select需要使用标签。标签要放在for,switch,select的前面。


闭包：
	闭包函数传参和不传参，直接调用外面的变量，参数的拷贝。
