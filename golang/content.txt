源码安装
	1>	设置变量GOROOT_BOOTSTRAP ，也就是go编译器的地址
	2> cd src && ./all.bash
	3>下载工具包 go get golang.org/x/tools/cmd/...
	4>export GOROOT=/home/lbb/go
	  export PATH=$PATH:$GOBIN:$GOPATH/bin
      export GOPATH=/home/lbb/gowork

package const--> var ---> init()

book 
#	golang-china/gopl-zh/
    https://github.com/gopl-zh/gopl-zh.github.com
	https://tiancaiamao.gitbooks.io/go-internals/content/zh/
	https://golang.org/doc/effective_go.html

条件编译
   1> 条件编译语句要和package 包语句之间有空行
   2> +build !linux
   3> // +build go1.6,!go1.7  go1.7以上的不编译次文件


gdb 调试golang   
	gdb -tui -d $GOROOT 然后source /usr/local/go/src/runtime/runtime-gdb.py  就可以使用 info goroutine 
	dlv 调试
	gom // xinneng  go get github.com/rakyll/gom/cmd/gom

    go test -c -o rpc_test -gcflags="-N -l"
    gdb xxx
        set args -test.run='TestRpcReOpen'

int 字节长度和cpu位数有关

slices, maps, and functions: these types cannot be compared using ==, and may not be used as map keys.
	slice,map里面存放数据的数组可能会调整大小，从而引起前后数据的不一致。

string 
	type = struct string { uint8 *str; int len; }

struct 匿名字段是结构体，也可以调用匿名字段的指针方法
time
	Timer定时完需要重置
	ticker 就是一直循环定时
	time有个goroutine，采用堆结构处理时间，当时间到期后会调用sendTime()无阻塞(select)的填充Timer里的chan。

select 里面定时不要在里边写time.After(d)，原因就是select每次执行都会重新执行case语句,并重新注册到select中。
select // if some case be ready on one time, it random select one to run, be careful
switch不会自动从一个case子句跌落到下一个case子句。但是case可以使用逗号分隔的列表。

变量shadow问题  外部定义的变量，在其他范围{}内使用:=来赋值(情况多出现在和err同时赋值时),回出现变量隐藏的问题  go tool vet -shadow xx.go 可以发现这个问题

channel src/runtime/chan.go   make(chan int) 返回的是一个指针 *hchan
	只能在多个goroutine中使用
	向关闭的channel 中发送数据会引发panic,在一个nil的channel上发送，接受数据会被永远阻塞(select中监听nil发送是可以的),一个channel关闭多次会panic,
	监听关闭的channel，依然可以接受到之前成功发送的数据，如果已经没有数据会产生一个零值的数据。
	v,ok:=<-ch ok==true:v数据有效，ok==false:chan关闭，可以直接使用range遍历数据
	无缓存chan,接收端准备好后发布端才会继续执行，有缓存chan接收端可以放下就继续执行
	channel 类型可以比较,当且仅当两chan引用的是同一个对象。

[]type          slice = struct []type{ type *array; int len; int cap; }

range语句中的生成的数据是真实数据的拷贝，[],map,channel
被defer的调用(函数)会在包含的函数的结尾执行，而不是代码块哦末尾(if,for)
map 
	类型创建返回的是指针 type = struct hash<keyType,valueType> {
	    int count;
	    uint8 flags;
	    uint8 B;
	    uint32 hash0;
	    struct bucket<keyType,valueType> *buckets;
	    struct bucket<keyType,valueType> *oldbuckets;
	    uintptr nevacuate;
	    [2]*[]*runtime.bmap *overflow;
	} *
	
	map 取不存在的key的value,返回零直

context 包实现了对多个派生go的管理，每个需要监听ctx.Done()退出，正常完成后调用CancelFunc

go net/http  
	客户端 tcp请求完成后 response body指向con(需要自己调用read,close方法)
		每个客户端里缓存之前的所有远程连接，每个con有两个goroutine:readloop,writeloop
	服务器 tcp listen ,连接上后开启一个goroutine, 读取解析协议。读写用到了limitread , buffreader,buffwrite 
	

break
	break只能中断当前最近的一个for,swtich,select;如果要跳出外面的for,switch,select需要使用标签。标签要放在for,switch,select的前面。
goto
	跳到goto指向的标签处

闭包：
	闭包函数传参和不传参，直接调用外面的变量，参数的拷贝。ref不传，value传.
	struct {F func, Arg args}

method(方法)只是添加对象为func(函数)的第一个参数


signal 
	Notify 可以多次调用，一个chan可以处理所有信号，一个信号可以放到多个chan里，底层h=map[chan<- os.Signal]*handler(bitmap原理),信号来了之后，遍历h，然后在handler中查看时候注册了改信号,如果注册了，就向该chan发送信号。 
	往chan里发送信号是非阻塞的，信号会丢失，所以chan必须是非阻塞的，长度至少为1

byte.Buffer  底层使用一块内从内存，内存扩大是2×cap()+n n为要写入的数据长度,使用reset重置会使写操作重头开始，底层内存不变
bufio.Write  io缓存，flush 将buf中的数据写入文件(可能是先写在内存中的文件),sync 写入硬盘


使用sync.WaitGroup的时候注意点，
  1) Add()和Wait()操作要在同一个G里操作，要不会出现wait提前退出的情况，
  2) 如果要传WaitGroup参数，一定要传指针

rand 
	The default Source is safe for concurrent use by multiple goroutines.
	NewSource returns a new pseudo-random Source seeded with the given value. Unlike the default Source used by top-level functions, this source is not safe for concurrent use by multiple goroutines.


string <------> []byte  复制转化
    runtime.slicebytetostring
    runtime.stringtoslicebyte

md5
   计算多个md5需要每次都调用New,创建新的md5,然后write,sum,
