# github.com/tal-tech/go-zero/core/collection

上一次的时间 lastTime      time.Duration // start time of the last bucket
上一次的位置 offset        int

// 定位本次所在的窗口
func (rw *RollingWindow) span() int {
	offset := int(timex.Since(rw.lastTime) / rw.interval)  // 计算当前时间和上次的窗口
	if 0 <= offset && offset < rw.size {
		return offset
	}

	return rw.size
}

// 更新offset
func (rw *RollingWindow) updateOffset() {
	span := rw.span() // 本次的offset
	if span <= 0 {
		return
	}

	offset := rw.offset
	// reset expired buckets   将本次和上次offset之间的窗口数据清理了
	for i := 0; i < span; i++ {
		rw.win.resetBucket((offset + i + 1) % rw.size)
	}

	rw.offset = (offset + span) % rw.size
	now := timex.Now()
	// align to interval time boundary
    // 将上一次的时间的末尾清零，方便计算下一个周期位置
	rw.lastTime = now - (now-rw.lastTime)%rw.interval
}

// Reduce runs fn on all buckets, ignore current bucket if ignoreCurrent was set.
// 遍历窗口数据
func (rw *RollingWindow) Reduce(fn func(b *Bucket)) {
	rw.lock.RLock()
	defer rw.lock.RUnlock()

	var diff int
	span := rw.span()
	// ignore current bucket, because of partial data
	if span == 0 && rw.ignoreCurrent {
		diff = rw.size - 1
	} else {
		diff = rw.size - span  // 去掉跳过的窗口
	}
	if diff > 0 {
        // 计算当前的时间应该在的窗口
		offset := (rw.offset + span + 1) % rw.size
		rw.win.reduce(offset, diff, fn)
	}
}
