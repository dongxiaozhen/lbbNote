git
git config --global user.name "xxx"
git config --global user.email xxxxx
git config --global core.editor vim
git config --list
git config --global --list
git config --global branch.autosetuprebase=always
git config --global ore.quotepath false  // 中文文件名显示乱码
git config --global credential.helper store
git config --global https.proxy 'socks5://127.0.0.1:1081'  // use shadowsock
git config --global http.proxy 'socks5://127.0.0.1:1081'   // use shadowsock
git config --global https.proxy 'http://127.0.0.1:7777/pac'  // use cow
git config --global http.proxy 'http://127.0.0.1:7777/pac'   // use cow
git config --global https.proxy 'http://127.0.0.1:7777'  // use cow
git config --global http.proxy 'http://127.0.0.1:7777'   // use cow
	git config --global --unset https.proxy

// 依赖diff-so-fancy
git config --global core.pager "diff-so-fancy | less --tabs=4 -RFX"
git config --global color.ui true
git config --global color.diff-highlight.oldNormal    "red bold"
git config --global color.diff-highlight.oldHighlight "red bold 52"
git config --global color.diff-highlight.newNormal    "green bold"
git config --global color.diff-highlight.newHighlight "green bold 22"
git config --global color.diff.meta       "yellow"
git config --global color.diff.frag       "magenta bold"
git config --global color.diff.commit     "yellow bold"
git config --global color.diff.old        "red bold"
git config --global color.diff.new        "green bold"
git config --global color.diff.whitespace "red reverse"

// changed file mode from 100644 to 100755 提示，原因：让git忽略文件权限变动 
git config --add core.filemode false

github
	github.com
	1.开源软件点击fork就会在自己的账户下复制那个项目
	2.clone地址，然后在本地执行git clone xxxxx(网址)

添加文件.gitignore到项目根目录，里面填写要忽略的文件名 (项目全局共享)
添加文件名到.git/info/exclude文件中      			(个人局部设置)
git config --global core.excludesfile /home/lbb/.gitignore (个人全局)
git status --ignored -s (显示忽略跟踪的文件名)


git pull == git fetch + git merger
git pull --rebase  = git fetch + git rebase

git fetch origin foo:mybranch  拉取远程分支的foo来更新本地的mybranch(:mybranch不写，默认是更新本地的origin/foo)

git remote -v 远程的git地址
git remote set-url remote url 跟新 remote 的远程地址

git rev-parse --git-dir         显示.git目录所在的位置
git rev-parse --show-toplevel    显示工作区根目录
git rev-parse --show-prefix      显示相对于工作区根目录的相对目录

git stash save "mesage" == git stash ,但是可以写说明
git stash list				显示所有stash
git stash drop xxxx			清楚xxxx stash
git stash drop clear        清楚所有的stash

git checkout 改变的事refs/HEAD文件里分支名称
	git checkout -- filename 将取消work区的修改
	git checkout branch 切换分支
	git checkout -b branch 创建并切换分支
	git checkout  -b develop origin/master        // 创建并切换封装develop, 指向origin/master分支顶点端。
    git checkout HEAD^(branchName) fileName //将本地的fileName文件回退到上上次提交的fileName版本
    git checkout commit   游离head，(正常：HEAD->分支->commit, 游离: HEAD->commit)

git reset 改变的是refs/head/branchName文件里的ID
	git reset HEAD filename 将stage中的提价退回到work区，(只是从stage到work,数据还在)
	git reset --soft commitID 将原先HEAD 到 commitID 之间的提交转到了stage中，refs/head/branchName指向commitID
	git reset  commitID 将原先HEAD 到 commitID 之间的提交转到了work中，refs/head/brancNname指向commitID
	git reset  commitID 将原先HEAD 到 commitID 之间的提交在work，stage中删除H，refs/head/branchName指向commitID

git revert c2  撤销c2提交，(原理，创建新的commit,指向c2前一个commit)

git clean -f     删除未跟踪文件

git cherry-pick xxxx 用于把另一个本地分支的commit修改应用到当前分支。     xxxx(commitID)

git push origin master:mybranch (用本地的master分支更新远程的mybranch)
git push origin :mybranch (删除分支mybranch)

git fsck --lost-found  丢失分支和stash后，用来恢复

重置（reset）一般用于重置暂存区(除非使用--hard参数，否则不重置工作区)，而检出（checkout）命令主要是覆盖工作区（如果<commt>不省略，也会替换暂存区中相应的文件）。
	   git push origin master:refs/for/master

（1丢弃B）
----A---------B---------C----D---E-----F
  start   discard     begin           end

	 git rebase --onto A B F((B,F]左开右闭)
	 git rebase -i A  (然后去掉B的commit)


（2 BC合并）
----A---------B---------C----D---E-----F
  start       begin    end

      git rebase -i A  (然后改C为squad)

git rebase -i
	删除一行commit 就相当于将该次提交删除
	reword 可以修改此次commit message
	squad 此行提交和前一次合并
	edit 此提交可以修改(添加，删除，修改内容到此提交)

里程碑tag
  git tag -m "xxx" name <commitID>创建
  git tag -d name   删除
  git discrible  描述离你最近的锚点
  git push origin tagName  创建远程tag
  git push origin :tagName 删除远程的tag

 分支管理branch
	git branch name <start-point> 创建分支           （branch不能切换分支，需要checkout）
	git branch -d name 检查name分支是否已经合并到其他分支，否则拒绝删除
	git branch -D name 强制删除
	git branch -m/-M oldname newname  重命名分支（拒绝/强制）
    git branch -f branch1 commit1 将branch1的head指向commit1所在的位置
    git branch -u origin/master master  本地分支master和远程分支origin/master对应
    git branch -v 查看所有分支
    git branch -vv 产看本地分支和远程分支的对应关系

git rebase orign/master 和git merger的却别   （在develop分支放到orign/master分支后面）
（原始结构）
	c1--------c2---------c3--------c4（origin)
	           -
			     -------c5-------c6(develop)

(rebase后的结构) 在develop分支rebase origin，提交在下面的是origin
	c1--------c2---------c3--------c4(origin)
	                                 -
			                          -------c5-------c6(develop)
(merger后的结构)
	c1--------c2---------c3--------c4(origin)
	            --                     --
			      -------c5-------c6     -
				                    - ----c7(develop)
补丁
   *git format-patch -s HEAD~3..HEAD或者SHA1ID   某次提交以后的所有patch
	git format-patch -M master         // 当前分支所有超前master的提交
	git apply --stat newpatch.patch     // 先检查patch文件：#
    git apply --check  newpatch.patch    检查能否应用成功：#
   *git am xxx

repo
	repo init -u
	repo sync 克隆或同步本地文件
	repo start 实际上是对git checkout -b 命令的封装

显示指定文件相关的每一次diff
	git log --graph 图形显示
    git log commitName -1(commitName之后的1次提交) -p(显示文件变动内容) [file]
    
    // 文件在那些提交中有变动
       git log -- file //只显示commitId
       git log -p --file 
	   git log --follow file / git whatchanged file // 文件在那些提交中有变动
    git log commit -1 -p [file]
    git log --skip n 跳过前n个commit


	git log --left-right dev...master (dev和master 提交对比)
	git log dev ^master  (查看 dev 有，而 master 中没有的)
	git log master..dev  (查看 dev 中比 master 中多提交了哪些内容)

	git diff commit1 commit2  // commit1到commit2之间的修改
	git diff commit1 commit2  --stat // commit1到commit2之间的修改,只显示修改过的文件名
显示指定文件是什么人在什么时间修改过,每一行的提交记录
    git blame [file]

gitk -- filename   gitk显示

git diff 			work和stage的比较
git diff --cached 	stage 与HEAD比较
git diff HEAD 		work,stage中的内容和 HEAD比较

git show commitID 显示该提交的变动信息
git show commitID fileName 查看该提交中某个文件的变动

git log --oneline(只有一行信息显示) --graph(图形显示) --decorate(显示tag) <branchname>(要显示的分支) < ^branchname>(不在此分支上的提交)
git log -S "要查找的内容"
git log -G "要查找的内容,正则表达式"


git add -u 添加已被跟踪的文件到stage


git add --patch filename  暂存一个文件的一部分


取消跟踪文件
   git rm --cached xxx


使用 ^ 向上移动 1 个提交记录
使用 ~<num> 向上移动多个提交记录，如 ~3


安装配置
   sudo apt install git
   配置 ~/.gitconfig
       mv gitconfig ~/.gitconfig
